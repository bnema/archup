// Code generated by MockGen. DO NOT EDIT.
// Source: internal/phases/phase.go
//
// Generated by this command:
//
//	mockgen -source=internal/phases/phase.go -destination=internal/phases/mocks/mock_phase.go -package=mocks -typed -self_package=github.com/bnema/archup/internal/phases
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	phases "github.com/bnema/archup/internal/phases"
	gomock "go.uber.org/mock/gomock"
)

// MockPhase is a mock of Phase interface.
type MockPhase struct {
	ctrl     *gomock.Controller
	recorder *MockPhaseMockRecorder
	isgomock struct{}
}

// MockPhaseMockRecorder is the mock recorder for MockPhase.
type MockPhaseMockRecorder struct {
	mock *MockPhase
}

// NewMockPhase creates a new mock instance.
func NewMockPhase(ctrl *gomock.Controller) *MockPhase {
	mock := &MockPhase{ctrl: ctrl}
	mock.recorder = &MockPhaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhase) EXPECT() *MockPhaseMockRecorder {
	return m.recorder
}

// CanSkip mocks base method.
func (m *MockPhase) CanSkip() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSkip")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSkip indicates an expected call of CanSkip.
func (mr *MockPhaseMockRecorder) CanSkip() *MockPhaseCanSkipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSkip", reflect.TypeOf((*MockPhase)(nil).CanSkip))
	return &MockPhaseCanSkipCall{Call: call}
}

// MockPhaseCanSkipCall wrap *gomock.Call
type MockPhaseCanSkipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhaseCanSkipCall) Return(arg0 bool) *MockPhaseCanSkipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhaseCanSkipCall) Do(f func() bool) *MockPhaseCanSkipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhaseCanSkipCall) DoAndReturn(f func() bool) *MockPhaseCanSkipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Description mocks base method.
func (m *MockPhase) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockPhaseMockRecorder) Description() *MockPhaseDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockPhase)(nil).Description))
	return &MockPhaseDescriptionCall{Call: call}
}

// MockPhaseDescriptionCall wrap *gomock.Call
type MockPhaseDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhaseDescriptionCall) Return(arg0 string) *MockPhaseDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhaseDescriptionCall) Do(f func() string) *MockPhaseDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhaseDescriptionCall) DoAndReturn(f func() string) *MockPhaseDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockPhase) Execute(progressChan chan<- phases.ProgressUpdate) phases.PhaseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", progressChan)
	ret0, _ := ret[0].(phases.PhaseResult)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockPhaseMockRecorder) Execute(progressChan any) *MockPhaseExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPhase)(nil).Execute), progressChan)
	return &MockPhaseExecuteCall{Call: call}
}

// MockPhaseExecuteCall wrap *gomock.Call
type MockPhaseExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhaseExecuteCall) Return(arg0 phases.PhaseResult) *MockPhaseExecuteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhaseExecuteCall) Do(f func(chan<- phases.ProgressUpdate) phases.PhaseResult) *MockPhaseExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhaseExecuteCall) DoAndReturn(f func(chan<- phases.ProgressUpdate) phases.PhaseResult) *MockPhaseExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockPhase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPhaseMockRecorder) Name() *MockPhaseNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPhase)(nil).Name))
	return &MockPhaseNameCall{Call: call}
}

// MockPhaseNameCall wrap *gomock.Call
type MockPhaseNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhaseNameCall) Return(arg0 string) *MockPhaseNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhaseNameCall) Do(f func() string) *MockPhaseNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhaseNameCall) DoAndReturn(f func() string) *MockPhaseNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PostCheck mocks base method.
func (m *MockPhase) PostCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// PostCheck indicates an expected call of PostCheck.
func (mr *MockPhaseMockRecorder) PostCheck() *MockPhasePostCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCheck", reflect.TypeOf((*MockPhase)(nil).PostCheck))
	return &MockPhasePostCheckCall{Call: call}
}

// MockPhasePostCheckCall wrap *gomock.Call
type MockPhasePostCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhasePostCheckCall) Return(arg0 error) *MockPhasePostCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhasePostCheckCall) Do(f func() error) *MockPhasePostCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhasePostCheckCall) DoAndReturn(f func() error) *MockPhasePostCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreCheck mocks base method.
func (m *MockPhase) PreCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// PreCheck indicates an expected call of PreCheck.
func (mr *MockPhaseMockRecorder) PreCheck() *MockPhasePreCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCheck", reflect.TypeOf((*MockPhase)(nil).PreCheck))
	return &MockPhasePreCheckCall{Call: call}
}

// MockPhasePreCheckCall wrap *gomock.Call
type MockPhasePreCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhasePreCheckCall) Return(arg0 error) *MockPhasePreCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhasePreCheckCall) Do(f func() error) *MockPhasePreCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhasePreCheckCall) DoAndReturn(f func() error) *MockPhasePreCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockPhase) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockPhaseMockRecorder) Rollback() *MockPhaseRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockPhase)(nil).Rollback))
	return &MockPhaseRollbackCall{Call: call}
}

// MockPhaseRollbackCall wrap *gomock.Call
type MockPhaseRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhaseRollbackCall) Return(arg0 error) *MockPhaseRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhaseRollbackCall) Do(f func() error) *MockPhaseRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhaseRollbackCall) DoAndReturn(f func() error) *MockPhaseRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockPhase) SetStatus(status phases.PhaseStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", status)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockPhaseMockRecorder) SetStatus(status any) *MockPhaseSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockPhase)(nil).SetStatus), status)
	return &MockPhaseSetStatusCall{Call: call}
}

// MockPhaseSetStatusCall wrap *gomock.Call
type MockPhaseSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPhaseSetStatusCall) Return() *MockPhaseSetStatusCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPhaseSetStatusCall) Do(f func(phases.PhaseStatus)) *MockPhaseSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPhaseSetStatusCall) DoAndReturn(f func(phases.PhaseStatus)) *MockPhaseSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockPhase) Status() phases.PhaseStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(phases.PhaseStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockPhaseMockRecorder) Status() *Mockphases.PhaseStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPhase)(nil).Status))
	return &Mockphases.PhaseStatusCall{Call: call}
}

// Mockphases.PhaseStatusCall wrap *gomock.Call
type Mockphases.PhaseStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Mockphases.PhaseStatusCall) Return(arg0 phases.PhaseStatus) *Mockphases.PhaseStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Mockphases.PhaseStatusCall) Do(f func() phases.PhaseStatus) *Mockphases.PhaseStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Mockphases.PhaseStatusCall) DoAndReturn(f func() phases.PhaseStatus) *Mockphases.PhaseStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
